// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: pkg/cadvisor/api/cadvisor.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ContainerInfoRequest is used when users check a container info from the REST API.
// It specifies how much data users want to get about a container
type ContainerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max number of stats to return. Specify -1 for all stats currently available.
	// cAdvisor's default: 60
	NumStats int64 `protobuf:"varint,1,opt,name=numStats,proto3" json:"numStats,omitempty"`
	// Start time for which to query information.
	// If omitted, the beginning of time is assumed.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// End time for which to query information.
	// If omitted, current time is assumed.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *ContainerInfoRequest) Reset() {
	*x = ContainerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfoRequest) ProtoMessage() {}

func (x *ContainerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfoRequest.ProtoReflect.Descriptor instead.
func (*ContainerInfoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerInfoRequest) GetNumStats() int64 {
	if x != nil {
		return x.NumStats
	}
	return 0
}

func (x *ContainerInfoRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ContainerInfoRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ContainerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*ContainerInfo `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *ContainerInfoResponse) Reset() {
	*x = ContainerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfoResponse) ProtoMessage() {}

func (x *ContainerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfoResponse.ProtoReflect.Descriptor instead.
func (*ContainerInfoResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerInfoResponse) GetContainers() []*ContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

type ContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Container Reference
	ContainerID   string `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=containerName,proto3" json:"containerName,omitempty"`
	PodUID        string `protobuf:"bytes,4,opt,name=podUID,proto3" json:"podUID,omitempty"`
	PodName       string `protobuf:"bytes,5,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace  string `protobuf:"bytes,6,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	// Stats
	Stats []*ContainerStats `protobuf:"bytes,7,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerInfo) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ContainerInfo) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerInfo) GetPodUID() string {
	if x != nil {
		return x.PodUID
	}
	return ""
}

func (x *ContainerInfo) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerInfo) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *ContainerInfo) GetStats() []*ContainerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// ContainerStats CPU usage time statistics.
type ContainerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CpuStats  *CPUStats              `protobuf:"bytes,2,opt,name=cpuStats,proto3" json:"cpuStats,omitempty"`
	DiskStats *DiskIoStats           `protobuf:"bytes,3,opt,name=diskStats,proto3" json:"diskStats,omitempty"`
}

func (x *ContainerStats) Reset() {
	*x = ContainerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats) ProtoMessage() {}

func (x *ContainerStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats.ProtoReflect.Descriptor instead.
func (*ContainerStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ContainerStats) GetCpuStats() *CPUStats {
	if x != nil {
		return x.CpuStats
	}
	return nil
}

func (x *ContainerStats) GetDiskStats() *DiskIoStats {
	if x != nil {
		return x.DiskStats
	}
	return nil
}

// CPUStats Cpu Completely Fair Scheduler statistics.
type CPUStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage          *CPUUsage          `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
	Cfs            *CPUCFS            `protobuf:"bytes,2,opt,name=cfs,proto3" json:"cfs,omitempty"`
	SchedulerStats *CPUSchedulerStats `protobuf:"bytes,3,opt,name=schedulerStats,proto3" json:"schedulerStats,omitempty"`
	// Smoothed average of number of runnable threads x 1000.
	// We multiply by thousand to avoid using floats, but preserving precision.
	// Load is smoothed over the last 10 seconds. Instantaneous value can be read
	// from LoadStats.NrRunning.
	LoadAverage int32 `protobuf:"varint,4,opt,name=loadAverage,proto3" json:"loadAverage,omitempty"`
}

func (x *CPUStats) Reset() {
	*x = CPUStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUStats) ProtoMessage() {}

func (x *CPUStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUStats.ProtoReflect.Descriptor instead.
func (*CPUStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{4}
}

func (x *CPUStats) GetUsage() *CPUUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *CPUStats) GetCfs() *CPUCFS {
	if x != nil {
		return x.Cfs
	}
	return nil
}

func (x *CPUStats) GetSchedulerStats() *CPUSchedulerStats {
	if x != nil {
		return x.SchedulerStats
	}
	return nil
}

func (x *CPUStats) GetLoadAverage() int32 {
	if x != nil {
		return x.LoadAverage
	}
	return 0
}

// CPUUsage time statistics.
type CPUUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total CPU usage.
	// Unit: nanoseconds.
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Per CPU/core usage of the container.
	// Unit: nanoseconds.
	PerCpu []uint64 `protobuf:"varint,2,rep,packed,name=perCpu,proto3" json:"perCpu,omitempty"`
	// Time spent in user space.
	// Unit: nanoseconds.
	User uint64 `protobuf:"varint,3,opt,name=user,proto3" json:"user,omitempty"`
	// Time spent in kernel space.
	// Unit: nanoseconds.
	System uint64 `protobuf:"varint,4,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *CPUUsage) Reset() {
	*x = CPUUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUUsage) ProtoMessage() {}

func (x *CPUUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUUsage.ProtoReflect.Descriptor instead.
func (*CPUUsage) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{5}
}

func (x *CPUUsage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CPUUsage) GetPerCpu() []uint64 {
	if x != nil {
		return x.PerCpu
	}
	return nil
}

func (x *CPUUsage) GetUser() uint64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *CPUUsage) GetSystem() uint64 {
	if x != nil {
		return x.System
	}
	return 0
}

// CPUCFS Completely Fair Scheduler statistics.
type CPUCFS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of elapsed enforcement intervals.
	Periods uint64 `protobuf:"varint,1,opt,name=periods,proto3" json:"periods,omitempty"`
	// Total number of times tasks in the cgroup have been throttled.
	ThrottledPeriods uint64 `protobuf:"varint,2,opt,name=throttledPeriods,proto3" json:"throttledPeriods,omitempty"`
	// Total time duration for which tasks in the cgroup have been throttled.
	// Unit: nanoseconds.
	ThrottledTime uint64 `protobuf:"varint,3,opt,name=throttledTime,proto3" json:"throttledTime,omitempty"`
}

func (x *CPUCFS) Reset() {
	*x = CPUCFS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUCFS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUCFS) ProtoMessage() {}

func (x *CPUCFS) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUCFS.ProtoReflect.Descriptor instead.
func (*CPUCFS) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{6}
}

func (x *CPUCFS) GetPeriods() uint64 {
	if x != nil {
		return x.Periods
	}
	return 0
}

func (x *CPUCFS) GetThrottledPeriods() uint64 {
	if x != nil {
		return x.ThrottledPeriods
	}
	return 0
}

func (x *CPUCFS) GetThrottledTime() uint64 {
	if x != nil {
		return x.ThrottledTime
	}
	return 0
}

// Cpu Aggregated scheduler statistics
type CPUSchedulerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time spent on the cpu
	RunTime uint64 `protobuf:"varint,1,opt,name=runTime,proto3" json:"runTime,omitempty"`
	// time spent waiting on a runqueue
	RunqueueTime uint64 `protobuf:"varint,2,opt,name=runqueueTime,proto3" json:"runqueueTime,omitempty"`
	// # of timeslices run on this cpu
	RunPeriods uint64 `protobuf:"varint,3,opt,name=runPeriods,proto3" json:"runPeriods,omitempty"`
}

func (x *CPUSchedulerStats) Reset() {
	*x = CPUSchedulerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSchedulerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSchedulerStats) ProtoMessage() {}

func (x *CPUSchedulerStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSchedulerStats.ProtoReflect.Descriptor instead.
func (*CPUSchedulerStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{7}
}

func (x *CPUSchedulerStats) GetRunTime() uint64 {
	if x != nil {
		return x.RunTime
	}
	return 0
}

func (x *CPUSchedulerStats) GetRunqueueTime() uint64 {
	if x != nil {
		return x.RunqueueTime
	}
	return 0
}

func (x *CPUSchedulerStats) GetRunPeriods() uint64 {
	if x != nil {
		return x.RunPeriods
	}
	return 0
}

type DiskIoStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IoServiceBytes []*PerDiskStats `protobuf:"bytes,1,rep,name=ioServiceBytes,proto3" json:"ioServiceBytes,omitempty"`
	IoServiced     []*PerDiskStats `protobuf:"bytes,2,rep,name=ioServiced,proto3" json:"ioServiced,omitempty"`
	IoQueued       []*PerDiskStats `protobuf:"bytes,3,rep,name=ioQueued,proto3" json:"ioQueued,omitempty"`
	Sectors        []*PerDiskStats `protobuf:"bytes,4,rep,name=sectors,proto3" json:"sectors,omitempty"`
	IoServiceTime  []*PerDiskStats `protobuf:"bytes,5,rep,name=ioServiceTime,proto3" json:"ioServiceTime,omitempty"`
	IoWaitTime     []*PerDiskStats `protobuf:"bytes,6,rep,name=ioWaitTime,proto3" json:"ioWaitTime,omitempty"`
	IoMerged       []*PerDiskStats `protobuf:"bytes,7,rep,name=ioMerged,proto3" json:"ioMerged,omitempty"`
	IoTime         []*PerDiskStats `protobuf:"bytes,8,rep,name=ioTime,proto3" json:"ioTime,omitempty"`
}

func (x *DiskIoStats) Reset() {
	*x = DiskIoStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskIoStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIoStats) ProtoMessage() {}

func (x *DiskIoStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIoStats.ProtoReflect.Descriptor instead.
func (*DiskIoStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{8}
}

func (x *DiskIoStats) GetIoServiceBytes() []*PerDiskStats {
	if x != nil {
		return x.IoServiceBytes
	}
	return nil
}

func (x *DiskIoStats) GetIoServiced() []*PerDiskStats {
	if x != nil {
		return x.IoServiced
	}
	return nil
}

func (x *DiskIoStats) GetIoQueued() []*PerDiskStats {
	if x != nil {
		return x.IoQueued
	}
	return nil
}

func (x *DiskIoStats) GetSectors() []*PerDiskStats {
	if x != nil {
		return x.Sectors
	}
	return nil
}

func (x *DiskIoStats) GetIoServiceTime() []*PerDiskStats {
	if x != nil {
		return x.IoServiceTime
	}
	return nil
}

func (x *DiskIoStats) GetIoWaitTime() []*PerDiskStats {
	if x != nil {
		return x.IoWaitTime
	}
	return nil
}

func (x *DiskIoStats) GetIoMerged() []*PerDiskStats {
	if x != nil {
		return x.IoMerged
	}
	return nil
}

func (x *DiskIoStats) GetIoTime() []*PerDiskStats {
	if x != nil {
		return x.IoTime
	}
	return nil
}

type PerDiskStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string            `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Major  uint64            `protobuf:"varint,2,opt,name=major,proto3" json:"major,omitempty"`
	Minor  uint64            `protobuf:"varint,3,opt,name=minor,proto3" json:"minor,omitempty"`
	Stats  map[string]uint64 `protobuf:"bytes,4,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PerDiskStats) Reset() {
	*x = PerDiskStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerDiskStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerDiskStats) ProtoMessage() {}

func (x *PerDiskStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerDiskStats.ProtoReflect.Descriptor instead.
func (*PerDiskStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{9}
}

func (x *PerDiskStats) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *PerDiskStats) GetMajor() uint64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *PerDiskStats) GetMinor() uint64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *PerDiskStats) GetStats() map[string]uint64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

type MemoryNumaStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File        map[uint32]uint64 `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Anon        map[uint32]uint64 `protobuf:"bytes,2,rep,name=anon,proto3" json:"anon,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Unevictable map[uint32]uint64 `protobuf:"bytes,3,rep,name=unevictable,proto3" json:"unevictable,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MemoryNumaStats) Reset() {
	*x = MemoryNumaStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryNumaStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryNumaStats) ProtoMessage() {}

func (x *MemoryNumaStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryNumaStats.ProtoReflect.Descriptor instead.
func (*MemoryNumaStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{10}
}

func (x *MemoryNumaStats) GetFile() map[uint32]uint64 {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MemoryNumaStats) GetAnon() map[uint32]uint64 {
	if x != nil {
		return x.Anon
	}
	return nil
}

func (x *MemoryNumaStats) GetUnevictable() map[uint32]uint64 {
	if x != nil {
		return x.Unevictable
	}
	return nil
}

type MemoryStatsMemoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pgfault    uint64           `protobuf:"varint,1,opt,name=pgfault,proto3" json:"pgfault,omitempty"`
	Pgmajfault uint64           `protobuf:"varint,2,opt,name=pgmajfault,proto3" json:"pgmajfault,omitempty"`
	NumaStats  *MemoryNumaStats `protobuf:"bytes,3,opt,name=numaStats,proto3" json:"numaStats,omitempty"`
}

func (x *MemoryStatsMemoryData) Reset() {
	*x = MemoryStatsMemoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStatsMemoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStatsMemoryData) ProtoMessage() {}

func (x *MemoryStatsMemoryData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStatsMemoryData.ProtoReflect.Descriptor instead.
func (*MemoryStatsMemoryData) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{11}
}

func (x *MemoryStatsMemoryData) GetPgfault() uint64 {
	if x != nil {
		return x.Pgfault
	}
	return 0
}

func (x *MemoryStatsMemoryData) GetPgmajfault() uint64 {
	if x != nil {
		return x.Pgmajfault
	}
	return 0
}

func (x *MemoryStatsMemoryData) GetNumaStats() *MemoryNumaStats {
	if x != nil {
		return x.NumaStats
	}
	return nil
}

type MemoryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current memory usage, this includes all memory regardless of when it was
	// accessed.
	// Units: Bytes.
	Usage uint64 `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
	// Maximum memory usage recorded.
	// Units: Bytes.
	MaxUsage uint64 `protobuf:"varint,2,opt,name=maxUsage,proto3" json:"maxUsage,omitempty"`
	// Number of bytes of page cache memory.
	// Units: Bytes.
	Cache uint64 `protobuf:"varint,3,opt,name=cache,proto3" json:"cache,omitempty"`
	// The amount of anonymous and swap cache memory (includes transparent
	// hugepages).
	// Units: Bytes.
	Rss uint64 `protobuf:"varint,4,opt,name=rss,proto3" json:"rss,omitempty"`
	// The amount of swap currently used by the processes in this cgroup
	// Units: Bytes.
	Swap uint64 `protobuf:"varint,5,opt,name=swap,proto3" json:"swap,omitempty"`
	// The amount of memory used for mapped files (includes tmpfs/shmem)
	MappedFile uint64 `protobuf:"varint,6,opt,name=mappedFile,proto3" json:"mappedFile,omitempty"`
	// The amount of working set memory, this includes recently accessed memory,
	// dirty memory, and kernel memory. Working set is <= "usage".
	// Units: Bytes.
	WorkingSet       uint64                 `protobuf:"varint,7,opt,name=workingSet,proto3" json:"workingSet,omitempty"`
	Failcnt          uint64                 `protobuf:"varint,8,opt,name=failcnt,proto3" json:"failcnt,omitempty"`
	ContainerData    *MemoryStatsMemoryData `protobuf:"bytes,9,opt,name=containerData,proto3" json:"containerData,omitempty"`
	HierarchicalData *MemoryStatsMemoryData `protobuf:"bytes,10,opt,name=hierarchicalData,proto3" json:"hierarchicalData,omitempty"`
}

func (x *MemoryStats) Reset() {
	*x = MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats) ProtoMessage() {}

func (x *MemoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cadvisor_api_cadvisor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats.ProtoReflect.Descriptor instead.
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP(), []int{12}
}

func (x *MemoryStats) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *MemoryStats) GetMaxUsage() uint64 {
	if x != nil {
		return x.MaxUsage
	}
	return 0
}

func (x *MemoryStats) GetCache() uint64 {
	if x != nil {
		return x.Cache
	}
	return 0
}

func (x *MemoryStats) GetRss() uint64 {
	if x != nil {
		return x.Rss
	}
	return 0
}

func (x *MemoryStats) GetSwap() uint64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *MemoryStats) GetMappedFile() uint64 {
	if x != nil {
		return x.MappedFile
	}
	return 0
}

func (x *MemoryStats) GetWorkingSet() uint64 {
	if x != nil {
		return x.WorkingSet
	}
	return 0
}

func (x *MemoryStats) GetFailcnt() uint64 {
	if x != nil {
		return x.Failcnt
	}
	return 0
}

func (x *MemoryStats) GetContainerData() *MemoryStatsMemoryData {
	if x != nil {
		return x.ContainerData
	}
	return nil
}

func (x *MemoryStats) GetHierarchicalData() *MemoryStatsMemoryData {
	if x != nil {
		return x.HierarchicalData
	}
	return nil
}

var File_pkg_cadvisor_api_cadvisor_proto protoreflect.FileDescriptor

var file_pkg_cadvisor_api_cadvisor_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2,
	0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb7, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x50, 0x55, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x50, 0x55, 0x43, 0x46, 0x53, 0x52, 0x03, 0x63, 0x66, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x43, 0x70,
	0x75, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x43, 0x70, 0x75, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x74, 0x0a, 0x06, 0x43,
	0x50, 0x55, 0x43, 0x46, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x50, 0x55, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x22, 0xe5, 0x03, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x08, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x69, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08,
	0x69, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x0c, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x38,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x03, 0x0a, 0x0f, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4e, 0x75, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x6e, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x61, 0x6e, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0b, 0x75, 0x6e, 0x65, 0x76, 0x69, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4e, 0x75, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x65, 0x76, 0x69,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x65,
	0x76, 0x69, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x55, 0x6e,
	0x65, 0x76, 0x69, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x67, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x67, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x67, 0x6d, 0x61, 0x6a, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x67, 0x6d, 0x61, 0x6a, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x0b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x72, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x63, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f,
	0x0a, 0x10, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x32,
	0x8d, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_cadvisor_api_cadvisor_proto_rawDescOnce sync.Once
	file_pkg_cadvisor_api_cadvisor_proto_rawDescData = file_pkg_cadvisor_api_cadvisor_proto_rawDesc
)

func file_pkg_cadvisor_api_cadvisor_proto_rawDescGZIP() []byte {
	file_pkg_cadvisor_api_cadvisor_proto_rawDescOnce.Do(func() {
		file_pkg_cadvisor_api_cadvisor_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_cadvisor_api_cadvisor_proto_rawDescData)
	})
	return file_pkg_cadvisor_api_cadvisor_proto_rawDescData
}

var file_pkg_cadvisor_api_cadvisor_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pkg_cadvisor_api_cadvisor_proto_goTypes = []interface{}{
	(*ContainerInfoRequest)(nil),  // 0: cadvisor.api.ContainerInfoRequest
	(*ContainerInfoResponse)(nil), // 1: cadvisor.api.ContainerInfoResponse
	(*ContainerInfo)(nil),         // 2: cadvisor.api.ContainerInfo
	(*ContainerStats)(nil),        // 3: cadvisor.api.ContainerStats
	(*CPUStats)(nil),              // 4: cadvisor.api.CPUStats
	(*CPUUsage)(nil),              // 5: cadvisor.api.CPUUsage
	(*CPUCFS)(nil),                // 6: cadvisor.api.CPUCFS
	(*CPUSchedulerStats)(nil),     // 7: cadvisor.api.CPUSchedulerStats
	(*DiskIoStats)(nil),           // 8: cadvisor.api.DiskIoStats
	(*PerDiskStats)(nil),          // 9: cadvisor.api.PerDiskStats
	(*MemoryNumaStats)(nil),       // 10: cadvisor.api.MemoryNumaStats
	(*MemoryStatsMemoryData)(nil), // 11: cadvisor.api.MemoryStatsMemoryData
	(*MemoryStats)(nil),           // 12: cadvisor.api.MemoryStats
	nil,                           // 13: cadvisor.api.PerDiskStats.StatsEntry
	nil,                           // 14: cadvisor.api.MemoryNumaStats.FileEntry
	nil,                           // 15: cadvisor.api.MemoryNumaStats.AnonEntry
	nil,                           // 16: cadvisor.api.MemoryNumaStats.UnevictableEntry
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
}
var file_pkg_cadvisor_api_cadvisor_proto_depIdxs = []int32{
	17, // 0: cadvisor.api.ContainerInfoRequest.startTime:type_name -> google.protobuf.Timestamp
	17, // 1: cadvisor.api.ContainerInfoRequest.endTime:type_name -> google.protobuf.Timestamp
	2,  // 2: cadvisor.api.ContainerInfoResponse.containers:type_name -> cadvisor.api.ContainerInfo
	3,  // 3: cadvisor.api.ContainerInfo.stats:type_name -> cadvisor.api.ContainerStats
	17, // 4: cadvisor.api.ContainerStats.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 5: cadvisor.api.ContainerStats.cpuStats:type_name -> cadvisor.api.CPUStats
	8,  // 6: cadvisor.api.ContainerStats.diskStats:type_name -> cadvisor.api.DiskIoStats
	5,  // 7: cadvisor.api.CPUStats.usage:type_name -> cadvisor.api.CPUUsage
	6,  // 8: cadvisor.api.CPUStats.cfs:type_name -> cadvisor.api.CPUCFS
	7,  // 9: cadvisor.api.CPUStats.schedulerStats:type_name -> cadvisor.api.CPUSchedulerStats
	9,  // 10: cadvisor.api.DiskIoStats.ioServiceBytes:type_name -> cadvisor.api.PerDiskStats
	9,  // 11: cadvisor.api.DiskIoStats.ioServiced:type_name -> cadvisor.api.PerDiskStats
	9,  // 12: cadvisor.api.DiskIoStats.ioQueued:type_name -> cadvisor.api.PerDiskStats
	9,  // 13: cadvisor.api.DiskIoStats.sectors:type_name -> cadvisor.api.PerDiskStats
	9,  // 14: cadvisor.api.DiskIoStats.ioServiceTime:type_name -> cadvisor.api.PerDiskStats
	9,  // 15: cadvisor.api.DiskIoStats.ioWaitTime:type_name -> cadvisor.api.PerDiskStats
	9,  // 16: cadvisor.api.DiskIoStats.ioMerged:type_name -> cadvisor.api.PerDiskStats
	9,  // 17: cadvisor.api.DiskIoStats.ioTime:type_name -> cadvisor.api.PerDiskStats
	13, // 18: cadvisor.api.PerDiskStats.stats:type_name -> cadvisor.api.PerDiskStats.StatsEntry
	14, // 19: cadvisor.api.MemoryNumaStats.file:type_name -> cadvisor.api.MemoryNumaStats.FileEntry
	15, // 20: cadvisor.api.MemoryNumaStats.anon:type_name -> cadvisor.api.MemoryNumaStats.AnonEntry
	16, // 21: cadvisor.api.MemoryNumaStats.unevictable:type_name -> cadvisor.api.MemoryNumaStats.UnevictableEntry
	10, // 22: cadvisor.api.MemoryStatsMemoryData.numaStats:type_name -> cadvisor.api.MemoryNumaStats
	11, // 23: cadvisor.api.MemoryStats.containerData:type_name -> cadvisor.api.MemoryStatsMemoryData
	11, // 24: cadvisor.api.MemoryStats.hierarchicalData:type_name -> cadvisor.api.MemoryStatsMemoryData
	0,  // 25: cadvisor.api.ContainerInfoService.NodeCapacityStatus:input_type -> cadvisor.api.ContainerInfoRequest
	1,  // 26: cadvisor.api.ContainerInfoService.NodeCapacityStatus:output_type -> cadvisor.api.ContainerInfoResponse
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_pkg_cadvisor_api_cadvisor_proto_init() }
func file_pkg_cadvisor_api_cadvisor_proto_init() {
	if File_pkg_cadvisor_api_cadvisor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUCFS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSchedulerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskIoStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerDiskStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryNumaStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStatsMemoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cadvisor_api_cadvisor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_cadvisor_api_cadvisor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_cadvisor_api_cadvisor_proto_goTypes,
		DependencyIndexes: file_pkg_cadvisor_api_cadvisor_proto_depIdxs,
		MessageInfos:      file_pkg_cadvisor_api_cadvisor_proto_msgTypes,
	}.Build()
	File_pkg_cadvisor_api_cadvisor_proto = out.File
	file_pkg_cadvisor_api_cadvisor_proto_rawDesc = nil
	file_pkg_cadvisor_api_cadvisor_proto_goTypes = nil
	file_pkg_cadvisor_api_cadvisor_proto_depIdxs = nil
}
