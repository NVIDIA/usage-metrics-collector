// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/cadvisor/api/cadvisor.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerInfoServiceClient is the client API for ContainerInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerInfoServiceClient interface {
	NodeCapacityStatus(ctx context.Context, in *ContainerInfoRequest, opts ...grpc.CallOption) (*ContainerInfoResponse, error)
}

type containerInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerInfoServiceClient(cc grpc.ClientConnInterface) ContainerInfoServiceClient {
	return &containerInfoServiceClient{cc}
}

func (c *containerInfoServiceClient) NodeCapacityStatus(ctx context.Context, in *ContainerInfoRequest, opts ...grpc.CallOption) (*ContainerInfoResponse, error) {
	out := new(ContainerInfoResponse)
	err := c.cc.Invoke(ctx, "/cadvisor.api.ContainerInfoService/NodeCapacityStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerInfoServiceServer is the server API for ContainerInfoService service.
// All implementations must embed UnimplementedContainerInfoServiceServer
// for forward compatibility
type ContainerInfoServiceServer interface {
	NodeCapacityStatus(context.Context, *ContainerInfoRequest) (*ContainerInfoResponse, error)
	mustEmbedUnimplementedContainerInfoServiceServer()
}

// UnimplementedContainerInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerInfoServiceServer struct {
}

func (UnimplementedContainerInfoServiceServer) NodeCapacityStatus(context.Context, *ContainerInfoRequest) (*ContainerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeCapacityStatus not implemented")
}
func (UnimplementedContainerInfoServiceServer) mustEmbedUnimplementedContainerInfoServiceServer() {}

// UnsafeContainerInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerInfoServiceServer will
// result in compilation errors.
type UnsafeContainerInfoServiceServer interface {
	mustEmbedUnimplementedContainerInfoServiceServer()
}

func RegisterContainerInfoServiceServer(s grpc.ServiceRegistrar, srv ContainerInfoServiceServer) {
	s.RegisterService(&ContainerInfoService_ServiceDesc, srv)
}

func _ContainerInfoService_NodeCapacityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerInfoServiceServer).NodeCapacityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadvisor.api.ContainerInfoService/NodeCapacityStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerInfoServiceServer).NodeCapacityStatus(ctx, req.(*ContainerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerInfoService_ServiceDesc is the grpc.ServiceDesc for ContainerInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cadvisor.api.ContainerInfoService",
	HandlerType: (*ContainerInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeCapacityStatus",
			Handler:    _ContainerInfoService_NodeCapacityStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cadvisor/api/cadvisor.proto",
}
