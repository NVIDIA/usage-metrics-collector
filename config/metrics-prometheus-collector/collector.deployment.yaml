apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-prometheus-collector
spec:
  replicas: 1
  template:
    spec:
      containers:
      - name: metrics-prometheus-collector
        image: metrics-prometheus-collector
        command: [ metrics-prometheus-collector ]
        args:
        - --collector-config-filepath=/config/collector.yaml
        - --log-level-filepath=/log-config/log.level
        envFrom: [ {configMapRef: { name: metrics-cluster-config } } ]
        env:
        - { name: POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
        ports:
        - { containerPort: 8080, name: metrics, protocol: TCP }
        - { containerPort: 8090, name: healthz, protocol: TCP }
        - { containerPort: 9090, name: proto,   protocol: TCP }
        volumeMounts:
        - { name: config, mountPath: /config, readOnly: true }
        - { name: log-config, mountPath: /log-config, readOnly: true }
        - { name: metrics-prometheus-collector-samples, mountPath: /metrics-prometheus-collector-samples, readOnly: false }
        resources:
          requests: { cpu: "0.1", memory: 1Gi }
          limits:   { cpu: "0.1", memory: 1Gi }
        livenessProbe:
          failureThreshold: 3
          httpGet: { path: /v1/healthz, port: 8090 }
          initialDelaySeconds: 300 # 5 minutes
          periodSeconds: 120 # every 2 minutes
        readinessProbe:
          failureThreshold: 100 # 10 minutes
          httpGet: { path: /v1/is-ready, port: 8090 }
          initialDelaySeconds: 60 # wait for nodes to register
          periodSeconds: 6
      # - name: umc-archiver
      #   image: umc-archiver
      #   command: [ umc-archiver ]
      #   args:
      #   - "--project=SET_PROJECT"
      #   - "--bq-dataset=SET_DATASET"
      #   - "--bq-table=SET_TABLE"
      #   - "--frequency=30s"
      #   - "--gcs-bucket=SET_BUCKET"
      #   - "--gcs-folder=PATH/"
      #   - "--gcs-keep-folder-parts=2,3"
      #   - "/metrics-prometheus-collector-samples/*/*/*.json"
      #   volumeMounts:
      #   - { name: metrics-prometheus-collector-samples, mountPath: /metrics-prometheus-collector-samples, readOnly: false }
      #   resources:
      #     requests: { cpu: "0.05", memory: 1Gi }
      #     limits:   { cpu: "0.05", memory: 1Gi }
      volumes:
      - name: metrics-prometheus-collector-samples  # location for saving samples locally
        emptyDir: {}
      - name: config # configuration for the metrics prometheus collector
        configMap: { name: metrics-prometheus-collector, items: [{ key: "collector.yaml", path: "collector.yaml" }] }
      - name: log-config  # controls the log level
        configMap: { items: [ { key: prometheus-collector, path: log.level } ], name: metrics-log-config }
      - name: logs # controls the logging level -- doesn't require push to take affect
        emptyDir: {}
      serviceAccountName: metrics-prometheus-collector
      # # Commented out for kind clusters which run only 1 node by default
      # affinity:
      #   podAntiAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #     - topologyKey: kubernetes.io/hostname
      #       labelSelector:
      #         matchExpressions: [ { key: app, operator: In, values: [ metrics-prometheus-collector ] } ]
      terminationGracePeriodSeconds: 1
